import sys
from pathlib import Path

import click
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication

from autoopenraman import config_profile
from autoopenraman.acq import AcquisitionManager
from autoopenraman.gui import AutoOpenRamanGUI
from autoopenraman.live import LiveModeManager


@click.group()
def cli():
    """Aquisition and analysis with AutoOpenRaman.

    Use this to start the acquisition or live mode.
    Make sure Micro-Manager is running before executing!"""
    pass


@cli.command()
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    help="Debug flag (used for testing): if set, will only run for a few seconds and quit",
)
def gui(debug):
    """Start the unified GUI with both Live and Acquisition modes"""
    click.echo("Starting AutoOpenRaman GUI")
    app = QApplication(sys.argv)
    window = AutoOpenRamanGUI(debug)
    window.show()

    if debug:
        QTimer.singleShot(5000, app.quit)  # Run for 5 seconds and then quit

    sys.exit(app.exec_())


@cli.command()
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    help="Debug flag (used for testing): if set, will only run for a few seconds and quit",
)
def live(debug):
    """Start live mode (Original GUI)"""
    click.echo("Live mode (legacy)")
    app = QApplication(sys.argv)
    window = LiveModeManager(debug)
    window.show()

    if debug:
        QTimer.singleShot(5000, app.quit)  # Run for 5 seconds and then quit

    sys.exit(app.exec_())


@cli.command()
@click.option(
    "-p",
    "--position_file",
    type=click.Path(exists=True),
    help="Path to the JSON file containing the stage positions (Generated by Micro-Manager)",
    default=None,
)
@click.option(
    "-n", "--n-averages", type=int, help="Number of averages for each acquisition", default=1
)
@click.option(
    "-d",
    "--exp-dir",
    type=click.Path(),
    help="Folder where spectra will be saved\
        (parent path defined in profile)",
    default="data/",
)
@click.option(
    "--num_time_points",
    type=int,
    help="Number of time points in the acquisition. If None, only one acquisition is done",
    default=None,
)
@click.option(
    "--time_interval_s",
    type=float,
    help="The time interval between acquisitions in seconds. The default is 0.",
    default=0,
)
@click.option(
    "--shutter",
    is_flag=True,
    help="If set, will close the shutter between acquisitions (if available)",
)
@click.option(
    "-r",
    "--randomize-stage-positions",
    is_flag=True,
    help="If set, the order of the stage positions will be randomized",
)
def acq(
    position_file,
    n_averages,
    exp_dir,
    shutter,
    num_time_points,
    time_interval_s,
    randomize_stage_positions,
):
    """Start acquisition mode (No GUI). Set the parameters of acquisition"""
    click.echo("Acquisition mode (legacy)")

    exp_path = Path(config_profile.save_dir) / exp_dir

    if not exp_path.is_dir():
        print(f"Creating save directory: {exp_path}")
        exp_path.mkdir(parents=True)
    elif len(list(exp_path.glob("*.csv"))) > 0:
        if not click.confirm(
            f"Warning: {exp_path} is not empty. Are you sure you want to add files/overwrite?",
            default=False,
        ):
            click.echo("Aborting acquisition...")
            return

    if position_file is not None:
        if not Path(position_file).is_file():
            raise FileNotFoundError(f"Stage position file not found: {position_file}")
    elif randomize_stage_positions:
        raise ValueError("Randomizing stage positions requires a position file (--position-file).")
    AcquisitionManager(
        n_averages,
        exp_path,
        position_file,
        shutter,
        num_time_points,
        time_interval_s,
        randomize_stage_positions,
    ).run_acquisition()


def main():
    # By default, run the unified GUI
    if len(sys.argv) == 1:
        gui(False)
    else:
        cli()


if __name__ == "__main__":
    main()
