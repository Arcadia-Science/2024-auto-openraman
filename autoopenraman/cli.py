import sys
from pathlib import Path

import click
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication

from autoopenraman import configprofile
from autoopenraman.acq import AcquisitionManager
from autoopenraman.live import LiveModeManager
from autoopenraman.plot import SpectrumPlotter


@click.group()
def cli():
    """Aquisition and analysis with AutoOpenRaman.

    Use this to view data without saving, acquire over time/positions, and plot saved data.
     Make sure Micro-Manager is running before executing!"""
    pass


@cli.command()
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    help="Debug flag (used for testing): if set, will only run for a few seconds and quit",
)
def live(debug):
    """Start live mode (GUI)"""
    click.echo("Live mode")
    app = QApplication(sys.argv)

    window = LiveModeManager(debug)
    window.show()

    if debug:
        QTimer.singleShot(5000, app.quit)  # Run for 5 seconds and then quit

    sys.exit(app.exec_())


@cli.command()
@click.option(
    "-p",
    "--position_file",
    type=click.Path(exists=True),
    help="Path to the JSON file containing the stage positions (Generated by Micro-Manager)",
    default=None,
)
@click.option(
    "-n", "--n-averages", type=int, help="Number of averages for each acquisition", default=1
)
@click.option(
    "-d",
    "--exp-dir",
    type=click.Path(),
    help="Folder where spectra will be saved\
        (parent path defined in profile)",
    default="",
)
@click.option(
    "--shutter",
    is_flag=True,
    help="If set, will close the shutter between acquisitions (if available)",
)
@click.option(
    "-r",
    "--randomize-stage-positions",
    is_flag=True,
    help="If set, the order of the stage positions will be randomized",
)
@click.option(
    "--wasatch-integration-time-ms",
    type=int,
    help="Integration time for Wasatch spectrometer (ms), default: 100",
    default=100,
)
@click.option(
    "--wasatch-laser-power-mw",
    type=int,
    help="Laser power for Wasatch spectrometer (mW), default: 10",
    default=10,
)
@click.option(
    "--wasatch-laser-warmup-sec",
    type=int,
    help="Laser warmup time for Wasatch spectrometer (seconds), default: 10",
    default=10,
)
@click.option(
    "--enable-logging",
    is_flag=True,
    help="Enable detailed logging of the acquisition process",
)
def acq(
    position_file,
    n_averages,
    exp_dir,
    shutter,
    randomize_stage_positions,
    wasatch_integration_time_ms,
    wasatch_laser_power_mw,
    wasatch_laser_warmup_sec,
    enable_logging,
):
    """Start acquisition mode (No GUI). Set the parameters of acquisition"""
    click.echo("Acquisition mode")

    exp_path = Path(configprofile.save_dir) / exp_dir

    if not exp_path.is_dir():
        print(f"Creating save directory: {exp_path}")
        exp_path.mkdir(parents=True)
    elif len(list(exp_path.glob("*.csv"))) > 0:
        if not click.confirm(
            f"Warning: {exp_path} is not empty. Are you sure you want to add files/overwrite?",
            default=False,
        ):
            click.echo("Aborting acquisition...")
            return

    if position_file is not None:
        if not Path(position_file).is_file():
            raise FileNotFoundError(f"Stage position file not found: {position_file}")
    elif randomize_stage_positions:
        raise ValueError("Randomizing stage positions requires a position file (--position-file).")

    AcquisitionManager(
        n_averages,
        exp_path,
        position_file,
        shutter,
        randomize_stage_positions,
        wasatch_integration_time_ms,
        wasatch_laser_power_mw,
        wasatch_laser_warmup_sec,
        enable_logging,
    ).run_acquisition()


@cli.command()
@click.option(
    "-n", "--n-averages", type=int, help="Number of averages for each acquisition", default=1
)
@click.option(
    "-d",
    "--exp-dir",
    type=click.Path(),
    help="Folder where spectra will be saved\
        (parent path defined in profile)",
    default="",
)
@click.option(
    "-s",
    "--sync-file",
    type=click.Path(),
    help="Path to the sync file used for triggering acquisitions",
    default="sync.txt",
)
@click.option(
    "--wasatch-integration-time-ms",
    type=int,
    help="Integration time for Wasatch spectrometer (ms), default: 100",
    default=100,
)
@click.option(
    "--wasatch-laser-power-mw",
    type=int,
    help="Laser power for Wasatch spectrometer (mW), default: 10",
    default=10,
)
@click.option(
    "--wasatch-laser-warmup-sec",
    type=int,
    help="Laser warmup time for Wasatch spectrometer (seconds), default: 10",
    default=10,
)
@click.option(
    "--enable-logging",
    is_flag=True,
    help="Enable detailed logging of the acquisition process",
)
def sync_acq(
    n_averages,
    exp_dir,
    sync_file,
    wasatch_integration_time_ms,
    wasatch_laser_power_mw,
    wasatch_laser_warmup_sec,
    enable_logging,
):
    """Start synchronized acquisition mode (Wasatch only).

    Acquisition is triggered by 'ACQ' in the sync file.
    """
    click.echo("Synchronized Acquisition mode")

    from autoopenraman.sync_acq import SyncAcquisitionManager

    exp_path = Path(configprofile.save_dir) / exp_dir

    if not exp_path.is_dir():
        print(f"Creating save directory: {exp_path}")
        exp_path.mkdir(parents=True)
    elif len(list(exp_path.glob("*.csv"))) > 0:
        if not click.confirm(
            f"Warning: {exp_path} is not empty. Are you sure you want to add files/overwrite?",
            default=False,
        ):
            click.echo("Aborting acquisition...")
            return

    sync_file_path = Path(sync_file)
    print(f"Using sync file: {sync_file_path}")
    print("Waiting for 'ACQ' command in the sync file...")

    SyncAcquisitionManager(
        n_averages,
        exp_path,
        sync_file_path,
        wasatch_integration_time_ms,
        wasatch_laser_power_mw,
        wasatch_laser_warmup_sec,
        enable_logging,
    ).run_sync_acquisition()


@cli.command()
@click.option(
    "-f",
    "--file-or-dir",
    type=click.Path(exists=True),
    help="Path to a CSV file or a directory of CSV files.",
    required=True,
)
def plot(file_or_dir):
    """Plot spectrum of collected data (file or directory)"""
    click.echo("Plot mode")
    SpectrumPlotter(file_or_dir).run()


def main():
    cli()


if __name__ == "__main__":
    cli()
