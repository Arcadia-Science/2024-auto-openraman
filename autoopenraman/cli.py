from pathlib import Path

import click

from autoopenraman.acq import AcquisitionManager
from autoopenraman.live import LiveModeManager
from autoopenraman.plot import SpectrumPlotter


@click.group()
def cli():
    """Aquisition and analysis with AutoOpenRaman.

    Use this to view data without saving, acquire over time/positions, and plot saved data.
     Make sure Micro-Manager is running before executing!"""
    pass


@cli.command()
@click.option(
    "-d",
    "--debug",
    is_flag=True,
    help="Debug flag (used for testing): if set, will only run for a few seconds and quit",
)
def live(debug):
    """Start live mode (GUI)"""
    click.echo("Live mode")
    LiveModeManager().run(debug)


@cli.command()
@click.option(
    "-p",
    "--position_file",
    type=click.Path(exists=True),
    help="Path to the JSON file containing the stage positions (Generated by Micro-Manager)",
    default=None,
)
@click.option(
    "-n", "--n-averages", type=int, help="Number of averages for each acquisition", default=1
)
@click.option(
    "-s", "--save-dir", type=click.Path(), help="Path to save the spectra", default="data/"
)
@click.option(
    "--shutter",
    type=str,
    help="Name of shutter in Micro-Manager to use if shutter should\
        be closed between timeseries",
    default=None,
)
def acq(position_file, n_averages, save_dir, shutter):
    """Start acquisition mode (No GUI). Set the parameters of acquisition"""
    click.echo("Acquisition mode")

    save_dir = Path(save_dir)

    if not save_dir.is_dir():
        print(f"Creating save directory: {save_dir}")
        save_dir.mkdir(parents=True)
    elif len(list(save_dir.glob("*.csv"))) > 0:
        print(f"Warning: {save_dir} is not empty. Files may be overwritten.")

    if position_file is not None:
        if not Path(position_file).is_file():
            raise FileNotFoundError(f"Stage position file not found: {position_file}")
    AcquisitionManager(n_averages, save_dir, position_file, shutter).run_acquisition()


@cli.command()
@click.option(
    "-f",
    "--file-or-dir",
    type=click.Path(exists=True),
    help="Path to a CSV file or a directory of CSV files.",
    required=True,
)
def plot(file_or_dir):
    """Plot spectrum of collected data (file or directory)"""
    click.echo("Plot mode")
    SpectrumPlotter(file_or_dir).run()


def main():
    cli()


if __name__ == "__main__":
    cli()
