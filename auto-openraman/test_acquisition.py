import argparse
import json
import time
from typing import List, Tuple

import matplotlib.pyplot as plt
import numpy as np
from pycromanager import Acquisition, multi_d_acquisition_events


f, ax = plt.subplots()
x = np.linspace(0, 10, 200)
y = np.zeros_like(x)  # Placeholder for y data
line, = ax.plot(x, y)

def extract_stage_positions(file_path) -> Tuple[np.ndarray, List[str]]:
    # Load the JSON file
    with open(file_path) as file:
        data = json.load(file)

    # Extract the list of stage positions
    stage_positions = data['map']['StagePositions']['array']

    # Extract (X, Y) coordinates and labels
    coordinates = []
    labels = []

    for position in stage_positions:
        # Get the position array from DevicePositions
        device_positions = position['DevicePositions']['array']
        for device in device_positions:
            xy_position = device['Position_um']['array']
            coordinates.append(xy_position)
            labels.append(position['Label']['scalar'])

    # Convert coordinates to a numpy array of shape (N, 2) and labels to a numpy array
    coordinates_array = np.array(coordinates)

    return coordinates_array, labels

def img_process_fn(image, metadata):
    img_spectrum = image.mean(axis=1).squeeze()
    print("new data")
    x = np.linspace(0,len(img_spectrum), len(img_spectrum))
    line.set_data(x, img_spectrum)
    ax.set_xlim(0, len(img_spectrum))
    ax.set_ylim(np.min(img_spectrum), np.max(img_spectrum))
    f.canvas.draw()
    f.canvas.flush_events()
    return image, metadata


def mock_acquisition():
    '''mocks the Acquisition engine'''

    print('Mock acquisition')
    time.sleep(1)
    img_process_fn(np.random.random((100,100)), {'PositionName': 'Mock Position'})


if __name__ == '__main__':

    # Parse the command line arguments
    start = time.time()
    parser = argparse.ArgumentParser(description='Acquire images using the AutoOpenRaman acquisition')
    parser.add_argument('-p', '--pos_filepath', type=str, help='Path to the JSON file containing the stage positions (Generated by Micro-Manager)')
    args = parser.parse_args()

    xy_positions, labels = extract_stage_positions(args.pos_filepath)

    plt.show(block=False)
    plt.pause(0.1)

    # mock acquisition
    # for i in range(5):
    #     mock_acquisition()

    with Acquisition(image_process_fn=img_process_fn,
                     debug=False,
                     show_display=False) as acq:  # directory='data/', name='test'
        events = multi_d_acquisition_events(
            num_time_points=10,
            time_interval_s=1,
            # xy_positions=xy_positions,
            # position_labels=labels,
            order='t')
        acq.acquire(events)

    print(f"Time elapsed: {time.time() - start:.2f} s")
